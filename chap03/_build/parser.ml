type token =
  | EOF
  | ID of (string)
  | STRING of (string)
  | INT of (int)
  | COMMA
  | COLON
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | AND
  | OR
  | ASSIGN
  | ARRAY
  | IF
  | THEN
  | ELSE
  | WHILE
  | FOR
  | TO
  | DO
  | LET
  | IN
  | END
  | OF
  | BREAK
  | NIL
  | FUNCTION
  | VAR
  | TYPE

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open ErrorMsg

  let error tokidx msg =
    let pos = Parsing.rhs_start tokidx in
    let errmsg = "Syntax error: " ^ msg in
    ErrorMsg.error pos errmsg

  let badStr typ where =
    let pad = if (String.length where) = 0 then "" else " in " in
    typ ^ pad ^ where ^ "improperly formed."
  let badExpr where = badStr "Expression" where
  let badDecl where = badStr "Declaration(s)" where
# 63 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  260 (* COMMA *);
  261 (* COLON *);
  262 (* SEMICOLON *);
  263 (* LPAREN *);
  264 (* RPAREN *);
  265 (* LBRACK *);
  266 (* RBRACK *);
  267 (* LBRACE *);
  268 (* RBRACE *);
  269 (* DOT *);
  270 (* PLUS *);
  271 (* MINUS *);
  272 (* TIMES *);
  273 (* DIVIDE *);
  274 (* EQ *);
  275 (* NEQ *);
  276 (* LT *);
  277 (* LE *);
  278 (* GT *);
  279 (* GE *);
  280 (* AND *);
  281 (* OR *);
  282 (* ASSIGN *);
  283 (* ARRAY *);
  284 (* IF *);
  285 (* THEN *);
  286 (* ELSE *);
  287 (* WHILE *);
  288 (* FOR *);
  289 (* TO *);
  290 (* DO *);
  291 (* LET *);
  292 (* IN *);
  293 (* END *);
  294 (* OF *);
  295 (* BREAK *);
  296 (* NIL *);
  297 (* FUNCTION *);
  298 (* VAR *);
  299 (* TYPE *);
    0|]

let yytransl_block = [|
  257 (* ID *);
  258 (* STRING *);
  259 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\006\000\006\000\006\000\
\006\000\006\000\006\000\004\000\004\000\009\000\009\000\009\000\
\010\000\013\000\013\000\013\000\013\000\014\000\014\000\015\000\
\015\000\011\000\011\000\012\000\012\000\012\000\012\000\005\000\
\005\000\003\000\003\000\007\000\007\000\016\000\016\000\008\000\
\008\000\017\000\017\000\000\000"

let yylen = "\002\000\
\002\000\003\000\006\000\004\000\006\000\004\000\008\000\005\000\
\001\000\002\000\001\000\001\000\002\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\004\000\004\000\006\000\003\000\003\000\004\000\
\004\000\008\000\008\000\005\000\001\000\001\000\003\000\004\000\
\004\000\004\000\004\000\000\000\002\000\001\000\001\000\001\000\
\004\000\001\000\003\000\003\000\003\000\000\000\004\000\000\000\
\005\000\004\000\006\000\007\000\009\000\007\000\009\000\000\000\
\002\000\000\000\003\000\000\000\002\000\000\000\003\000\000\000\
\004\000\000\000\005\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\037\000\000\000\014\000\012\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\000\076\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\000\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\046\000\047\000\048\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\031\000\000\000\002\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\000\000\000\000\017\000\018\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\000\000\000\000\069\000\027\000\043\000\000\000\000\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\065\000\036\000\000\000\000\000\000\000\000\000\000\000\050\000\
\000\000\000\000\049\000\008\000\071\000\000\000\000\000\073\000\
\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\067\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\053\000\051\000\052\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\055\000\000\000\000\000\000\000\000\000\000\000\
\000\000\075\000\000\000\000\000\000\000\000\000\057\000"

let yydgoto = "\002\000\
\014\000\104\000\117\000\033\000\105\000\016\000\055\000\059\000\
\034\000\035\000\036\000\037\000\131\000\125\000\171\000\091\000\
\136\000"

let yysindex = "\014\000\
\134\255\000\000\000\000\019\255\000\000\000\000\075\255\134\255\
\152\255\175\255\024\255\017\255\000\000\000\000\227\001\010\255\
\134\255\193\255\026\255\029\255\000\000\011\002\000\000\035\255\
\210\003\000\255\039\003\016\255\030\255\079\255\088\255\103\255\
\069\255\031\255\000\000\000\000\000\000\000\000\134\255\134\255\
\134\255\134\255\134\255\134\255\134\255\134\255\134\255\134\255\
\134\255\134\255\211\255\107\255\134\255\215\002\101\255\104\255\
\226\003\093\255\105\255\000\000\134\255\000\000\134\255\134\255\
\134\255\134\255\079\002\134\255\106\255\254\254\098\255\134\255\
\000\000\249\254\249\254\000\000\000\000\112\255\112\255\112\255\
\112\255\112\255\112\255\240\000\200\000\109\255\242\003\000\000\
\254\003\134\255\000\000\000\000\000\000\095\255\134\255\000\000\
\133\002\254\003\193\003\254\003\254\003\110\255\161\003\133\002\
\102\255\087\255\137\255\134\255\005\255\108\255\000\000\000\000\
\215\002\134\255\255\002\134\255\132\255\134\255\134\255\159\002\
\000\000\000\000\136\255\141\255\139\255\116\255\254\003\000\000\
\092\255\113\255\000\000\000\000\000\000\254\003\147\255\000\000\
\133\002\000\000\254\003\119\003\130\255\140\003\002\255\169\255\
\013\255\134\255\159\255\160\255\172\255\167\255\000\000\134\255\
\134\255\134\255\185\255\134\255\184\255\188\255\134\255\254\003\
\000\000\000\000\000\000\134\255\254\003\254\003\254\003\173\255\
\254\003\196\255\000\000\180\255\254\003\255\002\134\255\194\255\
\134\255\000\000\254\003\201\255\254\003\184\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\041\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\168\255\000\000\000\000\000\000\081\000\
\197\255\000\000\204\255\181\003\000\000\000\000\000\000\010\004\
\000\000\010\004\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\168\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\209\255\000\000\010\004\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\182\255\000\000\000\000\000\000\182\255\
\000\000\121\000\161\000\000\000\000\000\201\000\241\000\028\001\
\068\001\108\001\148\001\188\001\228\001\010\004\000\000\000\000\
\012\002\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\212\255\054\002\089\003\094\002\134\002\010\004\000\000\186\255\
\000\000\214\255\000\000\000\000\000\000\000\000\000\000\000\000\
\209\255\000\000\215\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\253\254\000\000\
\217\255\000\000\000\000\000\000\000\000\174\002\000\000\000\000\
\248\254\000\000\214\002\000\000\010\004\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\252\254\000\000\000\000\020\255\
\000\000\000\000\000\000\000\000\254\002\038\003\078\003\000\000\
\043\255\000\000\000\000\000\000\055\255\215\255\000\000\000\000\
\000\000\000\000\059\255\000\000\089\255\252\254\000\000"

let yygindex = "\000\000\
\000\000\004\000\154\255\175\000\158\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\102\000\050\000\122\000\
\060\000"

let yytablesize = 1315
let yytable = "\066\000\
\042\000\121\000\107\000\056\000\015\000\128\000\155\000\056\000\
\041\000\042\000\022\000\023\000\025\000\027\000\001\000\129\000\
\029\000\158\000\051\000\156\000\054\000\057\000\052\000\108\000\
\028\000\017\000\058\000\018\000\066\000\019\000\159\000\130\000\
\058\000\065\000\151\000\053\000\060\000\058\000\058\000\058\000\
\038\000\067\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\084\000\085\000\087\000\059\000\
\089\000\030\000\031\000\032\000\059\000\059\000\059\000\063\000\
\097\000\068\000\098\000\099\000\100\000\101\000\103\000\030\000\
\031\000\032\000\020\000\004\000\005\000\006\000\062\000\069\000\
\009\000\007\000\021\000\062\000\062\000\062\000\123\000\124\000\
\070\000\008\000\060\000\147\000\124\000\113\000\063\000\060\000\
\060\000\060\000\115\000\063\000\063\000\063\000\009\000\071\000\
\072\000\010\000\011\000\088\000\092\000\012\000\095\000\127\000\
\106\000\093\000\013\000\109\000\096\000\134\000\111\000\137\000\
\015\000\139\000\140\000\142\000\061\000\039\000\040\000\041\000\
\042\000\061\000\061\000\061\000\114\000\003\000\004\000\005\000\
\006\000\126\000\122\000\138\000\007\000\146\000\119\000\143\000\
\132\000\144\000\145\000\150\000\008\000\160\000\149\000\024\000\
\004\000\005\000\006\000\165\000\166\000\167\000\007\000\169\000\
\016\000\009\000\173\000\153\000\010\000\011\000\008\000\174\000\
\012\000\157\000\161\000\162\000\163\000\013\000\026\000\004\000\
\005\000\006\000\179\000\009\000\181\000\007\000\010\000\011\000\
\164\000\168\000\012\000\170\000\172\000\008\000\175\000\013\000\
\056\000\004\000\005\000\006\000\176\000\177\000\180\000\007\000\
\019\000\182\000\009\000\044\000\068\000\010\000\011\000\008\000\
\073\000\012\000\086\000\004\000\005\000\006\000\013\000\072\000\
\070\000\007\000\064\000\066\000\009\000\054\000\066\000\010\000\
\011\000\008\000\074\000\012\000\054\000\110\000\148\000\183\000\
\013\000\178\000\133\000\000\000\000\000\000\000\009\000\000\000\
\020\000\010\000\011\000\000\000\000\000\012\000\000\000\000\000\
\000\000\000\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\000\000\042\000\000\000\
\042\000\042\000\042\000\000\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\021\000\000\000\042\000\042\000\000\000\
\000\000\042\000\042\000\000\000\042\000\042\000\000\000\000\000\
\000\000\042\000\042\000\042\000\038\000\000\000\038\000\000\000\
\038\000\000\000\038\000\000\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\022\000\000\000\038\000\038\000\000\000\
\000\000\038\000\038\000\000\000\038\000\038\000\000\000\000\000\
\000\000\038\000\038\000\038\000\009\000\000\000\009\000\000\000\
\009\000\000\000\009\000\000\000\009\000\000\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\000\000\023\000\000\000\009\000\009\000\000\000\
\000\000\009\000\009\000\000\000\009\000\009\000\000\000\000\000\
\000\000\009\000\009\000\009\000\015\000\000\000\015\000\000\000\
\015\000\000\000\015\000\000\000\015\000\000\000\015\000\015\000\
\000\000\000\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\000\000\024\000\000\000\015\000\015\000\000\000\
\000\000\015\000\015\000\000\000\015\000\015\000\000\000\000\000\
\000\000\015\000\015\000\015\000\016\000\000\000\016\000\000\000\
\016\000\000\000\016\000\000\000\016\000\000\000\016\000\016\000\
\000\000\000\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\000\000\025\000\000\000\016\000\016\000\000\000\
\000\000\016\000\016\000\000\000\016\000\016\000\000\000\000\000\
\000\000\016\000\016\000\016\000\019\000\000\000\019\000\000\000\
\019\000\000\000\019\000\000\000\019\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\019\000\019\000\038\000\026\000\000\000\019\000\019\000\000\000\
\000\000\019\000\019\000\000\000\019\000\019\000\000\000\000\000\
\000\000\019\000\019\000\019\000\020\000\000\000\020\000\000\000\
\020\000\000\000\020\000\000\000\020\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\000\000\
\020\000\020\000\000\000\030\000\000\000\020\000\020\000\000\000\
\000\000\020\000\020\000\000\000\020\000\020\000\000\000\000\000\
\000\000\020\000\020\000\020\000\000\000\000\000\000\000\021\000\
\000\000\021\000\000\000\021\000\000\000\021\000\000\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\021\000\021\000\032\000\000\000\000\000\
\021\000\021\000\000\000\000\000\021\000\021\000\000\000\021\000\
\021\000\000\000\000\000\000\000\021\000\021\000\021\000\022\000\
\000\000\022\000\000\000\022\000\000\000\022\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\000\022\000\033\000\000\000\000\000\
\022\000\022\000\000\000\000\000\022\000\022\000\000\000\022\000\
\022\000\000\000\000\000\000\000\022\000\022\000\022\000\023\000\
\000\000\023\000\000\000\023\000\000\000\023\000\000\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000\023\000\006\000\000\000\000\000\
\023\000\023\000\000\000\000\000\023\000\023\000\000\000\023\000\
\023\000\000\000\000\000\000\000\023\000\023\000\023\000\024\000\
\000\000\024\000\000\000\024\000\000\000\024\000\000\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\024\000\024\000\029\000\000\000\000\000\
\024\000\024\000\000\000\000\000\024\000\024\000\000\000\024\000\
\024\000\000\000\000\000\000\000\024\000\024\000\024\000\025\000\
\000\000\025\000\000\000\025\000\000\000\025\000\000\000\025\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\025\000\025\000\005\000\000\000\000\000\
\025\000\025\000\000\000\000\000\025\000\025\000\000\000\025\000\
\025\000\000\000\000\000\000\000\025\000\025\000\025\000\026\000\
\000\000\026\000\000\000\026\000\000\000\026\000\000\000\026\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\050\000\026\000\034\000\000\000\000\000\
\026\000\026\000\000\000\000\000\026\000\026\000\000\000\026\000\
\026\000\000\000\000\000\000\000\026\000\026\000\026\000\030\000\
\061\000\030\000\062\000\030\000\000\000\030\000\000\000\030\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\050\000\000\000\035\000\000\000\000\000\
\030\000\030\000\000\000\000\000\030\000\030\000\000\000\030\000\
\030\000\000\000\000\000\000\000\030\000\030\000\030\000\000\000\
\000\000\032\000\000\000\032\000\000\000\032\000\000\000\032\000\
\000\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\000\102\000\004\000\
\005\000\006\000\032\000\032\000\000\000\007\000\032\000\032\000\
\004\000\032\000\032\000\000\000\000\000\008\000\032\000\032\000\
\032\000\033\000\000\000\033\000\000\000\033\000\000\000\033\000\
\000\000\033\000\009\000\000\000\000\000\010\000\011\000\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\013\000\000\000\
\000\000\000\000\033\000\033\000\000\000\000\000\033\000\033\000\
\000\000\033\000\033\000\000\000\000\000\000\000\033\000\033\000\
\033\000\006\000\116\000\006\000\000\000\006\000\000\000\006\000\
\000\000\006\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\141\000\004\000\
\005\000\006\000\006\000\006\000\000\000\007\000\006\000\006\000\
\000\000\006\000\006\000\000\000\000\000\008\000\006\000\006\000\
\006\000\029\000\000\000\029\000\000\000\029\000\000\000\029\000\
\000\000\029\000\009\000\000\000\000\000\010\000\011\000\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\013\000\000\000\
\000\000\000\000\029\000\029\000\000\000\000\000\029\000\029\000\
\000\000\029\000\029\000\000\000\000\000\000\000\029\000\029\000\
\029\000\005\000\090\000\005\000\000\000\005\000\000\000\005\000\
\000\000\005\000\000\000\000\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\000\000\000\000\005\000\005\000\000\000\000\000\005\000\005\000\
\000\000\005\000\005\000\000\000\000\000\000\000\005\000\005\000\
\005\000\034\000\135\000\034\000\000\000\034\000\000\000\034\000\
\000\000\034\000\000\000\000\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\000\000\000\000\034\000\034\000\000\000\000\000\034\000\034\000\
\000\000\034\000\034\000\000\000\000\000\000\000\034\000\034\000\
\034\000\035\000\000\000\035\000\000\000\035\000\000\000\035\000\
\000\000\035\000\000\000\000\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\000\000\000\000\035\000\035\000\000\000\000\000\035\000\035\000\
\066\000\035\000\035\000\000\000\000\000\000\000\035\000\035\000\
\035\000\007\000\000\000\007\000\000\000\007\000\000\000\007\000\
\000\000\007\000\000\000\000\000\004\000\000\000\004\000\000\000\
\004\000\000\000\004\000\000\000\004\000\000\000\000\000\000\000\
\000\000\000\000\007\000\007\000\000\000\000\000\007\000\007\000\
\000\000\007\000\007\000\000\000\000\000\004\000\007\000\007\000\
\007\000\004\000\004\000\000\000\004\000\004\000\000\000\000\000\
\000\000\004\000\004\000\004\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\152\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\154\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\037\000\000\000\000\000\000\000\000\000\000\000\
\000\000\120\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\000\000\000\000\000\000\000\000\118\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\094\000\000\000\000\000\064\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\112\000\000\000\000\000\000\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\050\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000"

let yycheck = "\008\001\
\000\000\104\000\005\001\008\001\001\000\001\001\005\001\012\001\
\016\001\017\001\007\000\008\000\009\000\010\000\001\000\011\001\
\000\001\005\001\009\001\018\001\017\000\018\000\013\001\026\001\
\001\001\007\001\001\001\009\001\037\001\011\001\018\001\027\001\
\036\001\034\001\137\000\026\001\008\001\041\001\042\001\043\001\
\000\000\026\001\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\036\001\
\053\000\041\001\042\001\043\001\041\001\042\001\043\001\029\001\
\061\000\036\001\063\000\064\000\065\000\066\000\067\000\041\001\
\042\001\043\001\000\001\001\001\002\001\003\001\036\001\001\001\
\000\000\007\001\008\001\041\001\042\001\043\001\000\001\001\001\
\001\001\015\001\036\001\000\001\001\001\090\000\036\001\041\001\
\042\001\043\001\095\000\041\001\042\001\043\001\028\001\001\001\
\036\001\031\001\032\001\001\001\008\001\035\001\018\001\108\000\
\007\001\010\001\040\001\018\001\012\001\114\000\010\001\116\000\
\000\000\118\000\119\000\120\000\036\001\014\001\015\001\016\001\
\017\001\041\001\042\001\043\001\038\001\000\001\001\001\002\001\
\003\001\001\001\037\001\008\001\007\001\026\001\033\001\008\001\
\037\001\005\001\008\001\001\001\015\001\146\000\038\001\000\001\
\001\001\002\001\003\001\152\000\153\000\154\000\007\001\156\000\
\000\000\028\001\159\000\034\001\031\001\032\001\015\001\164\000\
\035\001\001\001\012\001\012\001\001\001\040\001\000\001\001\001\
\002\001\003\001\175\000\028\001\177\000\007\001\031\001\032\001\
\018\001\001\001\035\001\004\001\001\001\015\001\018\001\040\001\
\000\001\001\001\002\001\003\001\001\001\018\001\005\001\007\001\
\000\000\001\001\028\001\036\001\008\001\031\001\032\001\015\001\
\034\000\035\001\000\001\001\001\002\001\003\001\040\001\012\001\
\008\001\007\001\037\001\008\001\028\001\008\001\037\001\031\001\
\032\001\015\001\012\001\035\001\012\001\072\000\129\000\182\000\
\040\001\174\000\113\000\255\255\255\255\255\255\028\001\255\255\
\000\000\031\001\032\001\255\255\255\255\035\001\255\255\255\255\
\255\255\255\255\040\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\255\255\006\001\255\255\
\008\001\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\000\000\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\004\001\255\255\006\001\255\255\
\008\001\255\255\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\000\000\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\004\001\255\255\006\001\255\255\
\008\001\255\255\010\001\255\255\012\001\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\000\000\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\004\001\255\255\006\001\255\255\
\008\001\255\255\010\001\255\255\012\001\255\255\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\000\000\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\004\001\255\255\006\001\255\255\
\008\001\255\255\010\001\255\255\012\001\255\255\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\000\000\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\004\001\255\255\006\001\255\255\
\008\001\255\255\010\001\255\255\012\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\024\001\025\001\000\000\000\000\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\004\001\255\255\006\001\255\255\
\008\001\255\255\010\001\255\255\012\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\024\001\025\001\255\255\000\000\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\255\255\255\255\255\255\004\001\
\255\255\006\001\255\255\008\001\255\255\010\001\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\024\001\025\001\000\000\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\034\001\255\255\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\004\001\
\255\255\006\001\255\255\008\001\255\255\010\001\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\024\001\025\001\000\000\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\034\001\255\255\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\004\001\
\255\255\006\001\255\255\008\001\255\255\010\001\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\024\001\025\001\000\000\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\034\001\255\255\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\004\001\
\255\255\006\001\255\255\008\001\255\255\010\001\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\024\001\025\001\000\000\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\034\001\255\255\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\004\001\
\255\255\006\001\255\255\008\001\255\255\010\001\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\024\001\025\001\000\000\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\034\001\255\255\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\004\001\
\255\255\006\001\255\255\008\001\255\255\010\001\255\255\012\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\025\001\000\000\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\034\001\255\255\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\004\001\
\006\001\006\001\008\001\008\001\255\255\010\001\255\255\012\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\000\000\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\034\001\255\255\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\255\255\
\255\255\004\001\255\255\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\000\001\001\001\
\002\001\003\001\029\001\030\001\255\255\007\001\033\001\034\001\
\000\000\036\001\037\001\255\255\255\255\015\001\041\001\042\001\
\043\001\004\001\255\255\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\028\001\255\255\255\255\031\001\032\001\255\255\
\255\255\035\001\255\255\255\255\255\255\255\255\040\001\255\255\
\255\255\255\255\029\001\030\001\255\255\255\255\033\001\034\001\
\255\255\036\001\037\001\255\255\255\255\255\255\041\001\042\001\
\043\001\004\001\006\001\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\000\001\001\001\
\002\001\003\001\029\001\030\001\255\255\007\001\033\001\034\001\
\255\255\036\001\037\001\255\255\255\255\015\001\041\001\042\001\
\043\001\004\001\255\255\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\028\001\255\255\255\255\031\001\032\001\255\255\
\255\255\035\001\255\255\255\255\255\255\255\255\040\001\255\255\
\255\255\255\255\029\001\030\001\255\255\255\255\033\001\034\001\
\255\255\036\001\037\001\255\255\255\255\255\255\041\001\042\001\
\043\001\004\001\004\001\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\255\255\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\029\001\030\001\255\255\255\255\033\001\034\001\
\255\255\036\001\037\001\255\255\255\255\255\255\041\001\042\001\
\043\001\004\001\004\001\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\255\255\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\029\001\030\001\255\255\255\255\033\001\034\001\
\255\255\036\001\037\001\255\255\255\255\255\255\041\001\042\001\
\043\001\004\001\255\255\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\255\255\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\029\001\030\001\255\255\255\255\033\001\034\001\
\034\001\036\001\037\001\255\255\255\255\255\255\041\001\042\001\
\043\001\004\001\255\255\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\255\255\255\255\004\001\255\255\006\001\255\255\
\008\001\255\255\010\001\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\029\001\030\001\255\255\255\255\033\001\034\001\
\255\255\036\001\037\001\255\255\255\255\029\001\041\001\042\001\
\043\001\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\034\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\034\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\006\001\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\255\255\030\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\010\001\255\255\255\255\029\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\010\001\255\255\255\255\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001"

let yynames_const = "\
  EOF\000\
  COMMA\000\
  COLON\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LBRACE\000\
  RBRACE\000\
  DOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LE\000\
  GT\000\
  GE\000\
  AND\000\
  OR\000\
  ASSIGN\000\
  ARRAY\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  FOR\000\
  TO\000\
  DO\000\
  LET\000\
  IN\000\
  END\000\
  OF\000\
  BREAK\000\
  NIL\000\
  FUNCTION\000\
  VAR\000\
  TYPE\000\
  "

let yynames_block = "\
  ID\000\
  STRING\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 40 "parser.mly"
            ()
# 615 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 45 "parser.mly"
                      ()
# 622 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expseq_) in
    Obj.repr(
# 46 "parser.mly"
                                            ()
# 631 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 47 "parser.mly"
                    ()
# 639 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 48 "parser.mly"
                             ()
# 648 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 49 "parser.mly"
                     ()
# 656 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 50 "parser.mly"
                                    ()
# 666 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'decs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expseq) in
    Obj.repr(
# 51 "parser.mly"
                           ()
# 674 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lvalue) in
    Obj.repr(
# 53 "parser.mly"
           ()
# 681 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
                  ()
# 687 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
        ()
# 693 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 56 "parser.mly"
        ()
# 700 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 57 "parser.mly"
                           ()
# 707 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 58 "parser.mly"
           ()
# 714 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 60 "parser.mly"
                 ()
# 722 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 61 "parser.mly"
                  ()
# 730 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 62 "parser.mly"
                  ()
# 738 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 63 "parser.mly"
                   ()
# 746 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 64 "parser.mly"
               ()
# 754 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 65 "parser.mly"
                ()
# 762 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 66 "parser.mly"
               ()
# 770 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 67 "parser.mly"
               ()
# 778 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 68 "parser.mly"
               ()
# 786 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 69 "parser.mly"
               ()
# 794 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 70 "parser.mly"
                ()
# 802 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 71 "parser.mly"
               ()
# 810 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'argseq) in
    Obj.repr(
# 73 "parser.mly"
                            ()
# 818 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fieldseq) in
    Obj.repr(
# 74 "parser.mly"
                              ()
# 826 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 75 "parser.mly"
                                ()
# 835 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 76 "parser.mly"
                      ()
# 843 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                        (error 2 (badExpr "parentheses"))
# 849 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 79 "parser.mly"
                      (error 2 (badExpr "if-then condition"))
# 856 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 80 "parser.mly"
                       (error 2 (badExpr "while condition"))
# 863 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 81 "parser.mly"
                                      (error 4 (badExpr "for loop initial value"))
# 872 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 82 "parser.mly"
                                      (error 6 (badExpr "for loop final value"))
# 881 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expseq) in
    Obj.repr(
# 83 "parser.mly"
                            (error 2 (badDecl "let-block"))
# 888 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
          (error 1 (badExpr ""))
# 894 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 88 "parser.mly"
       ()
# 901 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 89 "parser.mly"
                  ()
# 909 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 90 "parser.mly"
                             ()
# 917 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lvalue) in
    Obj.repr(
# 91 "parser.mly"
                               (error 3 (badExpr "array subscript"))
# 924 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 92 "parser.mly"
                         ()
# 932 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 93 "parser.mly"
                           (error 3 (badExpr "array subscript"))
# 939 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
                ()
# 945 "parser.ml"
               : 'decs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decs) in
    Obj.repr(
# 99 "parser.mly"
             ()
# 953 "parser.ml"
               : 'decs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tydec) in
    Obj.repr(
# 103 "parser.mly"
          ()
# 960 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vardec) in
    Obj.repr(
# 104 "parser.mly"
           ()
# 967 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fundec) in
    Obj.repr(
# 105 "parser.mly"
           ()
# 974 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 109 "parser.mly"
                  ()
# 982 "parser.ml"
               : 'tydec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "parser.mly"
       ()
# 989 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tyfields) in
    Obj.repr(
# 114 "parser.mly"
                           ()
# 996 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 115 "parser.mly"
                ()
# 1003 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
                        (error 2 (badDecl "record field list"))
# 1009 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "parser.mly"
                ()
# 1015 "parser.ml"
               : 'tyfields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tyfields_) in
    Obj.repr(
# 121 "parser.mly"
                          ()
# 1024 "parser.ml"
               : 'tyfields))
; (fun __caml_parser_env ->
    Obj.repr(
# 125 "parser.mly"
                ()
# 1030 "parser.ml"
               : 'tyfields_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'tyfields_) in
    Obj.repr(
# 126 "parser.mly"
                                ()
# 1039 "parser.ml"
               : 'tyfields_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 130 "parser.mly"
                      ()
# 1047 "parser.ml"
               : 'vardec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 131 "parser.mly"
                               ()
# 1056 "parser.ml"
               : 'vardec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'tyfields) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 135 "parser.mly"
                                              ()
# 1065 "parser.ml"
               : 'fundec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'tyfields) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 136 "parser.mly"
                                                       ()
# 1075 "parser.ml"
               : 'fundec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 137 "parser.mly"
                                           (error 4 (badDecl "parameter list"))
# 1083 "parser.ml"
               : 'fundec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 138 "parser.mly"
                                                    (error 4 (badDecl "parameter list"))
# 1092 "parser.ml"
               : 'fundec))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
                ()
# 1098 "parser.ml"
               : 'expseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expseq_) in
    Obj.repr(
# 143 "parser.mly"
                ()
# 1106 "parser.ml"
               : 'expseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "parser.mly"
                ()
# 1112 "parser.ml"
               : 'expseq_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expseq_) in
    Obj.repr(
# 148 "parser.mly"
                          ()
# 1120 "parser.ml"
               : 'expseq_))
; (fun __caml_parser_env ->
    Obj.repr(
# 152 "parser.mly"
                ()
# 1126 "parser.ml"
               : 'argseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'argseq_) in
    Obj.repr(
# 153 "parser.mly"
                ()
# 1134 "parser.ml"
               : 'argseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
                ()
# 1140 "parser.ml"
               : 'argseq_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'argseq_) in
    Obj.repr(
# 158 "parser.mly"
                      ()
# 1148 "parser.ml"
               : 'argseq_))
; (fun __caml_parser_env ->
    Obj.repr(
# 162 "parser.mly"
                ()
# 1154 "parser.ml"
               : 'fieldseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'fieldseq_) in
    Obj.repr(
# 163 "parser.mly"
                        ()
# 1163 "parser.ml"
               : 'fieldseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 167 "parser.mly"
                ()
# 1169 "parser.ml"
               : 'fieldseq_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fieldseq_) in
    Obj.repr(
# 168 "parser.mly"
                              ()
# 1178 "parser.ml"
               : 'fieldseq_))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
