type token =
  | EOF
  | ID of (string)
  | STRING of (string)
  | INT of (int)
  | COMMA
  | COLON
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | AND
  | OR
  | ASSIGN
  | ARRAY
  | IF
  | THEN
  | ELSE
  | WHILE
  | FOR
  | TO
  | DO
  | LET
  | IN
  | END
  | OF
  | BREAK
  | NIL
  | FUNCTION
  | VAR
  | TYPE

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open ErrorMsg
  module A = Absyn

  let newSym name = Symbol.symbol name

  let leftPos tokidx =
    Parsing.rhs_start tokidx

  let left = leftPos 1

  (* for error productions *)
  let dummyExp = A.NilExp
  let dummyLvalue = A.SimpleVar (newSym "dummy", 0)
  let dummyTy = A.NameTy (newSym "dummy", 0)

  let error tokidx msg =
    let pos = leftPos tokidx in
    let errmsg = "Syntax error: " ^ msg in
    ErrorMsg.error pos errmsg

  let badStr typ where =
    let pad = if (String.length where) = 0 then "" else " in " in
    typ ^ pad ^ where ^ " improperly formed."
  let badExpr where = badStr "Expression" where
  let badDecl where = badStr "Declaration(s)" where
# 76 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  260 (* COMMA *);
  261 (* COLON *);
  262 (* SEMICOLON *);
  263 (* LPAREN *);
  264 (* RPAREN *);
  265 (* LBRACK *);
  266 (* RBRACK *);
  267 (* LBRACE *);
  268 (* RBRACE *);
  269 (* DOT *);
  270 (* PLUS *);
  271 (* MINUS *);
  272 (* TIMES *);
  273 (* DIVIDE *);
  274 (* EQ *);
  275 (* NEQ *);
  276 (* LT *);
  277 (* LE *);
  278 (* GT *);
  279 (* GE *);
  280 (* AND *);
  281 (* OR *);
  282 (* ASSIGN *);
  283 (* ARRAY *);
  284 (* IF *);
  285 (* THEN *);
  286 (* ELSE *);
  287 (* WHILE *);
  288 (* FOR *);
  289 (* TO *);
  290 (* DO *);
  291 (* LET *);
  292 (* IN *);
  293 (* END *);
  294 (* OF *);
  295 (* BREAK *);
  296 (* NIL *);
  297 (* FUNCTION *);
  298 (* VAR *);
  299 (* TYPE *);
    0|]

let yytransl_block = [|
  257 (* ID *);
  258 (* STRING *);
  259 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\006\000\006\000\
\006\000\006\000\006\000\006\000\004\000\004\000\009\000\009\000\
\009\000\010\000\014\000\014\000\013\000\013\000\013\000\013\000\
\015\000\015\000\016\000\016\000\011\000\011\000\012\000\012\000\
\012\000\012\000\017\000\017\000\017\000\017\000\017\000\005\000\
\005\000\003\000\003\000\007\000\007\000\018\000\018\000\008\000\
\008\000\019\000\019\000\000\000"

let yylen = "\002\000\
\002\000\003\000\006\000\004\000\006\000\004\000\008\000\005\000\
\001\000\002\000\001\000\001\000\002\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\004\000\004\000\006\000\003\000\003\000\
\004\000\004\000\008\000\008\000\005\000\001\000\001\000\003\000\
\004\000\004\000\004\000\004\000\000\000\002\000\001\000\001\000\
\001\000\005\000\000\000\005\000\001\000\003\000\003\000\003\000\
\000\000\004\000\000\000\005\000\004\000\006\000\008\000\010\000\
\008\000\010\000\000\000\008\000\010\000\008\000\010\000\000\000\
\002\000\000\000\003\000\000\000\002\000\000\000\003\000\000\000\
\004\000\000\000\005\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\038\000\000\000\014\000\012\000\000\000\000\000\
\000\000\000\000\000\000\000\000\015\000\011\000\084\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\013\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\048\000\049\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\046\000\000\000\000\000\018\000\019\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\040\000\000\000\000\000\077\000\028\000\044\000\000\000\000\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\073\000\037\000\000\000\000\000\000\000\000\000\000\000\
\053\000\000\000\000\000\000\000\008\000\079\000\000\000\000\000\
\081\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\050\000\
\000\000\075\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\000\054\000\055\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\058\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\000\000\000\000\000\
\063\000\000\000\083\000\000\000\000\000\000\000\000\000\052\000\
\066\000\000\000\000\000\064\000\000\000\000\000\060\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\070\000\000\000\068\000\000\000\000\000\071\000\
\069\000"

let yydgoto = "\002\000\
\015\000\105\000\118\000\034\000\106\000\017\000\056\000\060\000\
\035\000\036\000\037\000\038\000\132\000\152\000\126\000\175\000\
\182\000\092\000\137\000"

let yysindex = "\018\000\
\138\255\000\000\000\000\119\255\000\000\000\000\075\255\138\255\
\179\255\189\255\029\255\017\255\000\000\000\000\000\000\227\001\
\007\255\138\255\079\002\033\255\032\255\000\000\133\002\000\000\
\013\255\251\003\022\255\135\003\037\255\038\255\079\255\090\255\
\095\255\062\255\222\254\000\000\000\000\000\000\000\000\138\255\
\138\255\138\255\138\255\138\255\138\255\138\255\138\255\138\255\
\138\255\138\255\138\255\159\002\108\255\138\255\228\255\105\255\
\106\255\011\004\099\255\107\255\000\000\138\255\000\000\138\255\
\138\255\138\255\138\255\239\002\138\255\118\255\001\255\113\255\
\138\255\000\000\012\255\012\255\000\000\000\000\132\255\132\255\
\132\255\132\255\132\255\132\255\240\000\200\000\122\255\027\004\
\000\000\039\004\138\255\000\000\000\000\000\000\098\255\138\255\
\000\000\213\002\039\004\234\003\039\004\039\004\100\255\202\003\
\213\002\114\255\061\255\136\255\138\255\004\255\115\255\000\000\
\000\000\228\255\138\255\039\003\138\255\134\255\138\255\138\255\
\133\003\000\000\000\000\135\255\139\255\146\255\129\255\039\004\
\000\000\088\255\125\255\121\255\000\000\000\000\039\004\155\255\
\000\000\213\002\000\000\039\004\160\003\123\255\181\003\018\255\
\166\255\019\255\138\255\156\255\160\255\173\255\174\255\000\000\
\158\255\000\000\138\255\138\255\138\255\183\255\138\255\181\255\
\187\255\138\255\039\004\000\000\000\000\000\000\175\255\138\255\
\039\004\039\004\039\004\177\255\011\002\196\255\000\000\180\255\
\011\002\004\255\039\003\138\255\198\255\000\000\195\255\138\255\
\000\000\121\255\000\000\011\002\202\255\201\255\011\002\000\000\
\000\000\104\255\181\255\000\000\197\255\204\255\000\000\020\255\
\021\255\215\255\138\255\221\255\138\255\185\255\011\002\205\255\
\011\002\138\255\000\000\138\255\000\000\011\002\011\002\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\041\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\190\255\000\000\000\000\000\000\000\000\
\081\000\217\255\000\000\218\255\222\003\000\000\000\000\000\000\
\051\004\000\000\051\004\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\190\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\219\255\000\000\
\051\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\194\255\000\000\000\000\000\000\
\194\255\000\000\121\000\161\000\000\000\000\000\201\000\241\000\
\028\001\068\001\108\001\148\001\188\001\228\001\051\004\000\000\
\000\000\012\002\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\225\255\054\002\089\003\094\002\134\002\051\004\000\000\
\199\255\000\000\226\255\000\000\000\000\000\000\000\000\000\000\
\000\000\219\255\000\000\223\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\043\255\
\000\000\227\255\000\000\051\255\000\000\000\000\174\002\000\000\
\000\000\251\254\000\000\214\002\000\000\051\004\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\255\
\000\000\000\000\059\255\000\000\000\000\000\000\000\000\000\000\
\254\002\038\003\078\003\000\000\030\255\000\000\000\000\000\000\
\030\255\000\000\223\255\000\000\000\000\000\000\000\000\000\000\
\000\000\051\255\000\000\030\255\000\000\000\000\030\255\000\000\
\000\000\226\255\006\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\030\255\000\000\
\030\255\000\000\000\000\000\000\000\000\030\255\030\255\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\003\000\153\255\202\000\165\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\062\000\068\000\126\255\060\000\
\176\255\142\000\078\000"

let yytablesize = 1356
let yytable = "\149\000\
\043\000\122\000\074\000\016\000\129\000\108\000\031\000\032\000\
\033\000\023\000\024\000\026\000\028\000\059\000\130\000\052\000\
\030\000\059\000\001\000\053\000\055\000\058\000\158\000\161\000\
\202\000\204\000\109\000\042\000\043\000\029\000\131\000\074\000\
\054\000\059\000\154\000\159\000\162\000\203\000\205\000\061\000\
\039\000\064\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\088\000\066\000\
\090\000\031\000\032\000\033\000\124\000\125\000\068\000\198\000\
\098\000\067\000\099\000\100\000\101\000\102\000\104\000\067\000\
\067\000\069\000\021\000\004\000\005\000\006\000\061\000\070\000\
\009\000\007\000\022\000\061\000\061\000\061\000\051\000\148\000\
\125\000\008\000\071\000\051\000\051\000\114\000\062\000\072\000\
\185\000\073\000\116\000\062\000\062\000\062\000\009\000\197\000\
\125\000\010\000\011\000\193\000\089\000\012\000\196\000\128\000\
\093\000\013\000\014\000\094\000\096\000\135\000\097\000\138\000\
\016\000\140\000\141\000\143\000\107\000\018\000\211\000\019\000\
\213\000\020\000\110\000\112\000\120\000\216\000\217\000\115\000\
\127\000\003\000\004\000\005\000\006\000\139\000\144\000\145\000\
\007\000\040\000\041\000\042\000\043\000\163\000\123\000\133\000\
\008\000\146\000\147\000\153\000\156\000\169\000\170\000\171\000\
\017\000\173\000\150\000\151\000\177\000\009\000\160\000\164\000\
\010\000\011\000\179\000\165\000\012\000\166\000\167\000\168\000\
\013\000\014\000\025\000\004\000\005\000\006\000\188\000\172\000\
\174\000\007\000\191\000\176\000\027\000\004\000\005\000\006\000\
\178\000\008\000\180\000\007\000\183\000\184\000\189\000\190\000\
\020\000\195\000\210\000\008\000\200\000\207\000\009\000\209\000\
\194\000\010\000\011\000\201\000\214\000\012\000\215\000\206\000\
\009\000\013\000\014\000\010\000\011\000\208\000\212\000\012\000\
\076\000\045\000\078\000\013\000\014\000\080\000\072\000\091\000\
\074\000\057\000\082\000\074\000\074\000\111\000\057\000\186\000\
\021\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\050\000\051\000\192\000\199\000\134\000\
\187\000\000\000\000\000\000\000\043\000\000\000\043\000\000\000\
\043\000\043\000\043\000\000\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\022\000\000\000\043\000\043\000\000\000\
\000\000\043\000\043\000\000\000\043\000\043\000\000\000\000\000\
\000\000\043\000\043\000\043\000\039\000\000\000\039\000\000\000\
\039\000\000\000\039\000\000\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\023\000\000\000\039\000\039\000\000\000\
\000\000\039\000\039\000\000\000\039\000\039\000\000\000\000\000\
\000\000\039\000\039\000\039\000\009\000\000\000\009\000\000\000\
\009\000\000\000\009\000\000\000\009\000\000\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\000\000\024\000\000\000\009\000\009\000\000\000\
\000\000\009\000\009\000\000\000\009\000\009\000\000\000\000\000\
\000\000\009\000\009\000\009\000\016\000\000\000\016\000\000\000\
\016\000\000\000\016\000\000\000\016\000\000\000\016\000\016\000\
\000\000\000\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\000\000\025\000\000\000\016\000\016\000\000\000\
\000\000\016\000\016\000\000\000\016\000\016\000\000\000\000\000\
\000\000\016\000\016\000\016\000\017\000\000\000\017\000\000\000\
\017\000\000\000\017\000\000\000\017\000\000\000\017\000\017\000\
\000\000\000\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\000\000\026\000\000\000\017\000\017\000\000\000\
\000\000\017\000\017\000\000\000\017\000\017\000\000\000\000\000\
\000\000\017\000\017\000\017\000\020\000\000\000\020\000\000\000\
\020\000\000\000\020\000\000\000\020\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\020\000\020\000\039\000\027\000\000\000\020\000\020\000\000\000\
\000\000\020\000\020\000\000\000\020\000\020\000\000\000\000\000\
\000\000\020\000\020\000\020\000\021\000\000\000\021\000\000\000\
\021\000\000\000\021\000\000\000\021\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\000\000\
\021\000\021\000\000\000\031\000\000\000\021\000\021\000\000\000\
\000\000\021\000\021\000\000\000\021\000\021\000\000\000\000\000\
\000\000\021\000\021\000\021\000\000\000\000\000\000\000\022\000\
\000\000\022\000\000\000\022\000\000\000\022\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\000\022\000\033\000\000\000\000\000\
\022\000\022\000\000\000\000\000\022\000\022\000\000\000\022\000\
\022\000\000\000\000\000\000\000\022\000\022\000\022\000\023\000\
\000\000\023\000\000\000\023\000\000\000\023\000\000\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000\023\000\034\000\000\000\000\000\
\023\000\023\000\000\000\000\000\023\000\023\000\000\000\023\000\
\023\000\000\000\000\000\000\000\023\000\023\000\023\000\024\000\
\000\000\024\000\000\000\024\000\000\000\024\000\000\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\024\000\024\000\006\000\000\000\000\000\
\024\000\024\000\000\000\000\000\024\000\024\000\000\000\024\000\
\024\000\000\000\000\000\000\000\024\000\024\000\024\000\025\000\
\000\000\025\000\000\000\025\000\000\000\025\000\000\000\025\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\025\000\025\000\030\000\000\000\000\000\
\025\000\025\000\000\000\000\000\025\000\025\000\000\000\025\000\
\025\000\000\000\000\000\000\000\025\000\025\000\025\000\026\000\
\000\000\026\000\000\000\026\000\000\000\026\000\000\000\026\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\026\000\026\000\005\000\000\000\000\000\
\026\000\026\000\000\000\000\000\026\000\026\000\000\000\026\000\
\026\000\000\000\000\000\000\000\026\000\026\000\026\000\027\000\
\000\000\027\000\000\000\027\000\000\000\027\000\000\000\027\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\027\000\035\000\000\000\000\000\
\027\000\027\000\000\000\000\000\027\000\027\000\000\000\027\000\
\027\000\000\000\000\000\000\000\027\000\027\000\027\000\031\000\
\000\000\031\000\000\000\031\000\000\000\031\000\000\000\031\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\000\000\036\000\000\000\000\000\
\031\000\031\000\000\000\000\000\031\000\031\000\000\000\031\000\
\031\000\000\000\000\000\181\000\031\000\031\000\031\000\000\000\
\000\000\033\000\000\000\033\000\000\000\033\000\000\000\033\000\
\000\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\000\057\000\004\000\
\005\000\006\000\033\000\033\000\000\000\007\000\033\000\033\000\
\004\000\033\000\033\000\000\000\000\000\008\000\033\000\033\000\
\033\000\034\000\000\000\034\000\000\000\034\000\000\000\034\000\
\000\000\034\000\009\000\000\000\000\000\010\000\011\000\000\000\
\000\000\012\000\000\000\000\000\000\000\013\000\014\000\000\000\
\000\000\000\000\034\000\034\000\000\000\000\000\034\000\034\000\
\000\000\034\000\034\000\000\000\000\000\000\000\034\000\034\000\
\034\000\006\000\062\000\006\000\063\000\006\000\000\000\006\000\
\000\000\006\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\087\000\004\000\
\005\000\006\000\006\000\006\000\000\000\007\000\006\000\006\000\
\000\000\006\000\006\000\000\000\000\000\008\000\006\000\006\000\
\006\000\030\000\000\000\030\000\000\000\030\000\000\000\030\000\
\000\000\030\000\009\000\000\000\000\000\010\000\011\000\000\000\
\000\000\012\000\000\000\000\000\000\000\013\000\014\000\000\000\
\000\000\000\000\030\000\030\000\000\000\000\000\030\000\030\000\
\000\000\030\000\030\000\000\000\000\000\000\000\030\000\030\000\
\030\000\005\000\117\000\005\000\000\000\005\000\000\000\005\000\
\000\000\005\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\103\000\004\000\
\005\000\006\000\005\000\005\000\000\000\007\000\005\000\005\000\
\000\000\005\000\005\000\000\000\000\000\008\000\005\000\005\000\
\005\000\035\000\000\000\035\000\000\000\035\000\000\000\035\000\
\000\000\035\000\009\000\000\000\000\000\010\000\011\000\000\000\
\000\000\012\000\000\000\000\000\000\000\013\000\014\000\000\000\
\000\000\000\000\035\000\035\000\000\000\000\000\035\000\035\000\
\000\000\035\000\035\000\000\000\000\000\000\000\035\000\035\000\
\035\000\036\000\136\000\036\000\000\000\036\000\000\000\036\000\
\000\000\036\000\000\000\000\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\050\000\051\000\
\000\000\000\000\036\000\036\000\000\000\000\000\036\000\036\000\
\000\000\036\000\036\000\000\000\000\000\000\000\036\000\036\000\
\036\000\007\000\000\000\007\000\000\000\007\000\000\000\007\000\
\000\000\007\000\000\000\000\000\004\000\000\000\004\000\000\000\
\004\000\000\000\004\000\000\000\004\000\000\000\000\000\000\000\
\000\000\000\000\007\000\007\000\000\000\000\000\007\000\007\000\
\000\000\007\000\007\000\000\000\000\000\004\000\007\000\007\000\
\007\000\004\000\004\000\000\000\004\000\004\000\000\000\000\000\
\000\000\004\000\004\000\004\000\142\000\004\000\005\000\006\000\
\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\050\000\051\000\
\009\000\000\000\000\000\010\000\011\000\000\000\000\000\012\000\
\067\000\000\000\000\000\013\000\014\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\051\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\155\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\157\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\121\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\000\000\000\000\000\000\000\000\119\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\095\000\000\000\000\000\065\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\113\000\000\000\000\000\000\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\050\000\051\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000"

let yycheck = "\130\000\
\000\000\105\000\008\001\001\000\001\001\005\001\041\001\042\001\
\043\001\007\000\008\000\009\000\010\000\008\001\011\001\009\001\
\000\001\012\001\001\000\013\001\018\000\019\000\005\001\005\001\
\005\001\005\001\026\001\016\001\017\001\001\001\027\001\037\001\
\026\001\001\001\138\000\018\001\018\001\018\001\018\001\008\001\
\000\000\029\001\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\034\001\
\054\000\041\001\042\001\043\001\000\001\001\001\026\001\194\000\
\062\000\036\001\064\000\065\000\066\000\067\000\068\000\042\001\
\043\001\036\001\000\001\001\001\002\001\003\001\036\001\001\001\
\000\000\007\001\008\001\041\001\042\001\043\001\036\001\000\001\
\001\001\015\001\001\001\041\001\042\001\091\000\036\001\001\001\
\177\000\036\001\096\000\041\001\042\001\043\001\028\001\000\001\
\001\001\031\001\032\001\188\000\001\001\035\001\191\000\109\000\
\008\001\039\001\040\001\010\001\018\001\115\000\012\001\117\000\
\000\000\119\000\120\000\121\000\007\001\007\001\207\000\009\001\
\209\000\011\001\018\001\010\001\033\001\214\000\215\000\038\001\
\001\001\000\001\001\001\002\001\003\001\008\001\008\001\005\001\
\007\001\014\001\015\001\016\001\017\001\147\000\037\001\037\001\
\015\001\008\001\026\001\001\001\034\001\155\000\156\000\157\000\
\000\000\159\000\038\001\043\001\162\000\028\001\001\001\012\001\
\031\001\032\001\168\000\012\001\035\001\001\001\001\001\018\001\
\039\001\040\001\000\001\001\001\002\001\003\001\180\000\001\001\
\004\001\007\001\184\000\001\001\000\001\001\001\002\001\003\001\
\018\001\015\001\018\001\007\001\001\001\018\001\001\001\005\001\
\000\000\001\001\018\001\015\001\008\001\203\000\028\001\205\000\
\007\001\031\001\032\001\008\001\210\000\035\001\212\000\001\001\
\028\001\039\001\040\001\031\001\032\001\001\001\018\001\035\001\
\008\001\036\001\008\001\039\001\040\001\012\001\037\001\004\001\
\008\001\008\001\012\001\037\001\035\000\073\000\012\001\178\000\
\000\000\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\186\000\195\000\114\000\
\179\000\255\255\255\255\255\255\004\001\255\255\006\001\255\255\
\008\001\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\000\000\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\004\001\255\255\006\001\255\255\
\008\001\255\255\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\000\000\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\004\001\255\255\006\001\255\255\
\008\001\255\255\010\001\255\255\012\001\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\000\000\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\004\001\255\255\006\001\255\255\
\008\001\255\255\010\001\255\255\012\001\255\255\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\000\000\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\004\001\255\255\006\001\255\255\
\008\001\255\255\010\001\255\255\012\001\255\255\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\000\000\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\004\001\255\255\006\001\255\255\
\008\001\255\255\010\001\255\255\012\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\024\001\025\001\000\000\000\000\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\004\001\255\255\006\001\255\255\
\008\001\255\255\010\001\255\255\012\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\024\001\025\001\255\255\000\000\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\255\255\255\255\255\255\004\001\
\255\255\006\001\255\255\008\001\255\255\010\001\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\024\001\025\001\000\000\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\034\001\255\255\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\004\001\
\255\255\006\001\255\255\008\001\255\255\010\001\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\024\001\025\001\000\000\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\034\001\255\255\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\004\001\
\255\255\006\001\255\255\008\001\255\255\010\001\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\024\001\025\001\000\000\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\034\001\255\255\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\004\001\
\255\255\006\001\255\255\008\001\255\255\010\001\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\024\001\025\001\000\000\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\034\001\255\255\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\004\001\
\255\255\006\001\255\255\008\001\255\255\010\001\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\024\001\025\001\000\000\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\034\001\255\255\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\004\001\
\255\255\006\001\255\255\008\001\255\255\010\001\255\255\012\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\025\001\000\000\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\034\001\255\255\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\004\001\
\255\255\006\001\255\255\008\001\255\255\010\001\255\255\012\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\000\000\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\034\001\255\255\036\001\
\037\001\255\255\255\255\041\001\041\001\042\001\043\001\255\255\
\255\255\004\001\255\255\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\000\001\001\001\
\002\001\003\001\029\001\030\001\255\255\007\001\033\001\034\001\
\000\000\036\001\037\001\255\255\255\255\015\001\041\001\042\001\
\043\001\004\001\255\255\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\028\001\255\255\255\255\031\001\032\001\255\255\
\255\255\035\001\255\255\255\255\255\255\039\001\040\001\255\255\
\255\255\255\255\029\001\030\001\255\255\255\255\033\001\034\001\
\255\255\036\001\037\001\255\255\255\255\255\255\041\001\042\001\
\043\001\004\001\006\001\006\001\008\001\008\001\255\255\010\001\
\255\255\012\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\000\001\001\001\
\002\001\003\001\029\001\030\001\255\255\007\001\033\001\034\001\
\255\255\036\001\037\001\255\255\255\255\015\001\041\001\042\001\
\043\001\004\001\255\255\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\028\001\255\255\255\255\031\001\032\001\255\255\
\255\255\035\001\255\255\255\255\255\255\039\001\040\001\255\255\
\255\255\255\255\029\001\030\001\255\255\255\255\033\001\034\001\
\255\255\036\001\037\001\255\255\255\255\255\255\041\001\042\001\
\043\001\004\001\006\001\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\000\001\001\001\
\002\001\003\001\029\001\030\001\255\255\007\001\033\001\034\001\
\255\255\036\001\037\001\255\255\255\255\015\001\041\001\042\001\
\043\001\004\001\255\255\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\028\001\255\255\255\255\031\001\032\001\255\255\
\255\255\035\001\255\255\255\255\255\255\039\001\040\001\255\255\
\255\255\255\255\029\001\030\001\255\255\255\255\033\001\034\001\
\255\255\036\001\037\001\255\255\255\255\255\255\041\001\042\001\
\043\001\004\001\004\001\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\255\255\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\029\001\030\001\255\255\255\255\033\001\034\001\
\255\255\036\001\037\001\255\255\255\255\255\255\041\001\042\001\
\043\001\004\001\255\255\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\255\255\255\255\004\001\255\255\006\001\255\255\
\008\001\255\255\010\001\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\029\001\030\001\255\255\255\255\033\001\034\001\
\255\255\036\001\037\001\255\255\255\255\029\001\041\001\042\001\
\043\001\033\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\000\001\001\001\002\001\003\001\
\255\255\255\255\255\255\007\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\028\001\255\255\255\255\031\001\032\001\255\255\255\255\035\001\
\034\001\255\255\255\255\039\001\040\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\034\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\033\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\255\255\255\255\255\255\255\255\030\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\010\001\255\255\255\255\029\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\010\001\255\255\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001"

let yynames_const = "\
  EOF\000\
  COMMA\000\
  COLON\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LBRACE\000\
  RBRACE\000\
  DOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LE\000\
  GT\000\
  GE\000\
  AND\000\
  OR\000\
  ASSIGN\000\
  ARRAY\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  FOR\000\
  TO\000\
  DO\000\
  LET\000\
  IN\000\
  END\000\
  OF\000\
  BREAK\000\
  NIL\000\
  FUNCTION\000\
  VAR\000\
  TYPE\000\
  "

let yynames_block = "\
  ID\000\
  STRING\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    Obj.repr(
# 53 "parser.mly"
            (_1)
# 655 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    Obj.repr(
# 58 "parser.mly"
                      (_2)
# 662 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Absyn.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expseq_) in
    Obj.repr(
# 59 "parser.mly"
                                            (A.SeqExp ((_2, leftPos 2) :: (_4, leftPos 4) :: _5))
# 671 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 60 "parser.mly"
                    (A.IfExp {test=_2; then'=_4; else'=None; pos=left})
# 679 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Absyn.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 61 "parser.mly"
                             (A.IfExp {test=_2; then'=_4; else'=Some _6; pos=left})
# 688 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 62 "parser.mly"
                     (A.WhileExp {test=_2; body=_4; pos=left})
# 696 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Absyn.exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 63 "parser.mly"
                                    (A.ForExp {var=newSym _2; escape= ref true; lo=_4; hi=_6; body=_8; pos=left})
# 706 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'decs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expseq) in
    Obj.repr(
# 64 "parser.mly"
                           (A.LetExp {decs=_2; body=A.SeqExp _4; pos=left})
# 714 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lvalue) in
    Obj.repr(
# 66 "parser.mly"
           (A.VarExp _1)
# 721 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
                  (A.SeqExp [])
# 727 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
        (A.NilExp)
# 733 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 69 "parser.mly"
        (A.IntExp _1)
# 740 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 70 "parser.mly"
                           (A.OpExp {left=A.IntExp 0; oper=A.MinusOp; right=_2; pos=left})
# 747 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parser.mly"
           (A.StringExp (_1, left))
# 754 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
          (A.BreakExp left)
# 760 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 74 "parser.mly"
                 (A.OpExp {left=_1; oper=A.PlusOp; right=_3; pos=leftPos 2})
# 768 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 75 "parser.mly"
                  (A.OpExp {left=_1; oper=A.MinusOp; right=_3; pos=leftPos 2})
# 776 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 76 "parser.mly"
                  (A.OpExp {left=_1; oper=A.TimesOp; right=_3; pos=leftPos 2})
# 784 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 77 "parser.mly"
                   (A.OpExp {left=_1; oper=A.DivideOp; right=_3; pos=leftPos 2})
# 792 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 78 "parser.mly"
               (A.OpExp {left=_1; oper=A.EqOp; right=_3; pos=leftPos 2})
# 800 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 79 "parser.mly"
                (A.OpExp {left=_1; oper=A.NeqOp; right=_3; pos=leftPos 2})
# 808 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 80 "parser.mly"
               (A.OpExp {left=_1; oper=A.LtOp; right=_3; pos=leftPos 2})
# 816 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 81 "parser.mly"
               (A.OpExp {left=_1; oper=A.LeOp; right=_3; pos=leftPos 2})
# 824 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 82 "parser.mly"
               (A.OpExp {left=_1; oper=A.GtOp; right=_3; pos=leftPos 2})
# 832 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 83 "parser.mly"
               (A.OpExp {left=_1; oper=A.GeOp; right=_3; pos=leftPos 2})
# 840 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 84 "parser.mly"
                (A.IfExp {test=_1; then'=_3; else'=Some (A.IntExp 0); pos=leftPos 2})
# 848 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 85 "parser.mly"
               (A.IfExp {test=_1; then'=A.IntExp 1; else'=Some _3; pos=leftPos 2})
# 856 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'argseq) in
    Obj.repr(
# 87 "parser.mly"
                            (A.CallExp {func=newSym _1; args=_3; pos=left})
# 864 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fieldseq) in
    Obj.repr(
# 88 "parser.mly"
                              (A.RecordExp {fields=_3; typ=newSym _1; pos=left})
# 872 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Absyn.exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 89 "parser.mly"
                                (A.ArrayExp {typ=newSym _1; size=_3; init=_6; pos=left})
# 881 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 90 "parser.mly"
                      (A.AssignExp {var=_1; exp=_3; pos=leftPos 2})
# 889 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
                        (error 2 (badExpr "parentheses"); dummyExp)
# 895 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 93 "parser.mly"
                      (error 2 (badExpr "if-then condition"); dummyExp)
# 902 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 94 "parser.mly"
                       (error 2 (badExpr "while condition"); dummyExp)
# 909 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 95 "parser.mly"
                                      (error 4 (badExpr "for loop initial value"); dummyExp)
# 918 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Absyn.exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 96 "parser.mly"
                                      (error 6 (badExpr "for loop final value"); dummyExp)
# 927 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expseq) in
    Obj.repr(
# 97 "parser.mly"
                            (error 2 (badDecl "let-block"); dummyExp)
# 934 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
          (error 1 (badExpr ""); dummyExp)
# 940 "parser.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 102 "parser.mly"
       (A.SimpleVar (newSym _1, left))
# 947 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 103 "parser.mly"
                  (A.FieldVar (_1, newSym _3, leftPos 2))
# 955 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    Obj.repr(
# 104 "parser.mly"
                             (A.SubscriptVar (_1, _3, leftPos 2))
# 963 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lvalue) in
    Obj.repr(
# 105 "parser.mly"
                               (error 3 (badExpr "array subscript"); dummyLvalue)
# 970 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    Obj.repr(
# 106 "parser.mly"
                         (A.SubscriptVar (A.SimpleVar (newSym _1, left), _3, leftPos 2))
# 978 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 107 "parser.mly"
                           (error 3 (badExpr "array subscript"); dummyLvalue)
# 985 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    Obj.repr(
# 110 "parser.mly"
                ([])
# 991 "parser.ml"
               : 'decs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decs) in
    Obj.repr(
# 111 "parser.mly"
             (_1 :: _2)
# 999 "parser.ml"
               : 'decs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tydec) in
    Obj.repr(
# 115 "parser.mly"
          (_1)
# 1006 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vardec) in
    Obj.repr(
# 116 "parser.mly"
           (_1)
# 1013 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fundec) in
    Obj.repr(
# 117 "parser.mly"
           (_1)
# 1020 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'tydec_) in
    Obj.repr(
# 121 "parser.mly"
                         (A.TypeDec ({name=newSym _2; ty=_4; pos=left} :: _5))
# 1029 "parser.ml"
               : 'tydec))
; (fun __caml_parser_env ->
    Obj.repr(
# 125 "parser.mly"
                ([])
# 1035 "parser.ml"
               : 'tydec_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'tydec_) in
    Obj.repr(
# 126 "parser.mly"
                         ({name=newSym _2; ty=_4; pos=left} :: _5)
# 1044 "parser.ml"
               : 'tydec_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 129 "parser.mly"
       (A.NameTy (newSym _1, left))
# 1051 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tyfields) in
    Obj.repr(
# 130 "parser.mly"
                           (A.RecordTy _2)
# 1058 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 131 "parser.mly"
                (A.ArrayTy (newSym _3, left))
# 1065 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    Obj.repr(
# 132 "parser.mly"
                        (error 2 (badDecl "record field list"); dummyTy)
# 1071 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    Obj.repr(
# 136 "parser.mly"
                ([])
# 1077 "parser.ml"
               : 'tyfields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tyfields_) in
    Obj.repr(
# 137 "parser.mly"
                          ({name=newSym _1; escape=ref true; typ=newSym _3; pos=leftPos 2} :: _4)
# 1086 "parser.ml"
               : 'tyfields))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "parser.mly"
                ([])
# 1092 "parser.ml"
               : 'tyfields_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'tyfields_) in
    Obj.repr(
# 142 "parser.mly"
                                ({name=newSym _2; escape=ref true; typ=newSym _4; pos=leftPos 3} :: _5)
# 1101 "parser.ml"
               : 'tyfields_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 146 "parser.mly"
                      (A.VarDec {name=newSym _2; escape=ref true; typ=None; init=_4; pos=leftPos 2})
# 1109 "parser.ml"
               : 'vardec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 147 "parser.mly"
                               (A.VarDec {name=newSym _2; escape=ref true; typ=Some (newSym _4, leftPos 4); init=_6; pos=leftPos 2})
# 1118 "parser.ml"
               : 'vardec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'tyfields) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'fundec_) in
    Obj.repr(
# 151 "parser.mly"
                                                      (A.FunctionDec ({name=newSym _2; params=_4; result=None; body=_7; pos=left} :: _8))
# 1128 "parser.ml"
               : 'fundec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'tyfields) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'fundec_) in
    Obj.repr(
# 152 "parser.mly"
                                                               (A.FunctionDec ({name=newSym _2; params=_4; result=Some (newSym _7, leftPos 7); body=_9; pos=left} :: _10))
# 1139 "parser.ml"
               : 'fundec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'fundec_) in
    Obj.repr(
# 153 "parser.mly"
                                                   (error 4 (badDecl "parameter list"); A.FunctionDec _8)
# 1148 "parser.ml"
               : 'fundec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'fundec_) in
    Obj.repr(
# 154 "parser.mly"
                                                            (error 4 (badDecl "parameter list"); A.FunctionDec _10)
# 1158 "parser.ml"
               : 'fundec))
; (fun __caml_parser_env ->
    Obj.repr(
# 158 "parser.mly"
                ([])
# 1164 "parser.ml"
               : 'fundec_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'tyfields) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'fundec_) in
    Obj.repr(
# 159 "parser.mly"
                                                      ({name=newSym _2; params=_4; result=None; body=_7; pos=left} :: _8)
# 1174 "parser.ml"
               : 'fundec_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'tyfields) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'fundec_) in
    Obj.repr(
# 160 "parser.mly"
                                                               ({name=newSym _2; params=_4; result=Some (newSym _7, leftPos 7); body=_9; pos=left} :: _10)
# 1185 "parser.ml"
               : 'fundec_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'fundec_) in
    Obj.repr(
# 161 "parser.mly"
                                                   (error 4 (badDecl "parameter list"); _8)
# 1194 "parser.ml"
               : 'fundec_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'fundec_) in
    Obj.repr(
# 162 "parser.mly"
                                                            (error 4 (badDecl "parameter list"); _10)
# 1204 "parser.ml"
               : 'fundec_))
; (fun __caml_parser_env ->
    Obj.repr(
# 165 "parser.mly"
                ([])
# 1210 "parser.ml"
               : 'expseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expseq_) in
    Obj.repr(
# 166 "parser.mly"
                ((_1, left) :: _2)
# 1218 "parser.ml"
               : 'expseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 170 "parser.mly"
                ([])
# 1224 "parser.ml"
               : 'expseq_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expseq_) in
    Obj.repr(
# 171 "parser.mly"
                          ((_2, leftPos 2) :: _3)
# 1232 "parser.ml"
               : 'expseq_))
; (fun __caml_parser_env ->
    Obj.repr(
# 175 "parser.mly"
                ([])
# 1238 "parser.ml"
               : 'argseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'argseq_) in
    Obj.repr(
# 176 "parser.mly"
                (_1 :: _2)
# 1246 "parser.ml"
               : 'argseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "parser.mly"
                ([])
# 1252 "parser.ml"
               : 'argseq_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'argseq_) in
    Obj.repr(
# 181 "parser.mly"
                      (_2 :: _3)
# 1260 "parser.ml"
               : 'argseq_))
; (fun __caml_parser_env ->
    Obj.repr(
# 185 "parser.mly"
                ([])
# 1266 "parser.ml"
               : 'fieldseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'fieldseq_) in
    Obj.repr(
# 186 "parser.mly"
                        ((newSym _1, _3, leftPos 2) :: _4)
# 1275 "parser.ml"
               : 'fieldseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 190 "parser.mly"
                ([])
# 1281 "parser.ml"
               : 'fieldseq_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fieldseq_) in
    Obj.repr(
# 191 "parser.mly"
                              ((newSym _2, _4, leftPos 3) :: _5)
# 1290 "parser.ml"
               : 'fieldseq_))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Absyn.exp)
